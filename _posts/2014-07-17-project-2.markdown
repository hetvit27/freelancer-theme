---
modal-id: 2
date: 2014-07-17
img: matchestwo.png
alt: image-alt
project-date: May 2023
client: Young Adults
category: Web Development
description: The matches feature allows you to find people in the same area and with interests as you, to see who you want to rizz up to be your future soulmate! Click here to rizz up your match
---

<head>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
</head>

## Matches

<h3>Find you potential soulmate!</h3>

<!-- Create inputs for search and question -->

<input id="search" placeholder="Search">
<button onclick="search()">Search</button>
<select id="filter">
	<option>Filter by...</option>
	<option>location</option>
	<option>college</option>
	<option>pronouns</option>
</select>

<input id="location" placeholder="Location">
<input id="college" placeholder="College">
<input id="pronouns" placeholder="Pronouns">
<input id="fav show" placeholder="Favorite Show">
<input id="fav movie" placeholder="Favorite Movie">
<button onclick="addDisc()">Submit</button>


<input id="id" placeholder="ID">
<button onclick="delete()">Delete</button>

<!-- Create table to display question posts -->
<table id="matches" border="1" style="border-collapse: collapse;">
		<tr>
				<th>Name</th>
				<th>Location</th>
				<th>College</th>
				<th>Pronouns</th>
				<th>Favorite Show</th>
                <th>Favorite Movie</th>
		</tr>
</table>

<script>
  Discussion();
  function Discussion() {
  	const options = {
                method: 'GET', // *GET, POST, PUT, DELETE, etc.
                // mode: 'cors', // no-cors, *cors, same-origin
                cache: 'default', // *default, no-cache, reload, force-cache, only-if-cached
                // credentials: 'same-origin', // include, same-origin, omit
                headers: {
                'Content-Type': 'application/json'
                // 'Content-Type': 'application/x-www-form-urlencoded',
                },
            };
    const url = "https://hetvitrivedi.tk/api/discussions/";
    fetch(url, options)
      .then(res => res.json())
      .then(data => {
        console.log(data);
        console.log(typeof data);
        console.log(JSON.stringify(data));

		for (let i = 0; i < data.length; i++) {
			addTableRow(data[i].question, data[i].unit, data[i].tags, data[i].email);
		}
      });
  }

  function addDisc() {
	const postOptions = {
                method: 'POST', // *GET, POST, PUT, DELETE, etc.
                // mode: 'cors', // no-cors, *cors, same-origin
                cache: 'default', // *default, no-cache, reload, force-cache, only-if-cached
                // credentials: 'same-origin', // include, same-origin, omit
                headers: {
                'Content-Type': 'application/json'
                // 'Content-Type': 'application/x-www-form-urlencoded',
                },
            };
	// var problemData = new URLSearchParams();
	// problemData.append(`problem`, document.getElementById("question").value);
	// problemData.append(`Unit`, document.getElementById("unit").value);
	// problemData.append(`Topic`, document.getElementById("topic").value);
	// problemData.append(`Tags`, document.getElementById("tags").value);
	var url = "https://hetvitrivedi.tk/api/discussions/add";
	url += "?question=" + document.getElementById("question").value;
	url += "&unit=" + document.getElementById("unit").value;
	url += "&tags=" + document.getElementById("tags").value;
	url += "&email=" + document.getElementById("email").value;
	// fetch the API
	fetch(url, postOptions)
	// response is a RESTful "promise" on any successful fetch
	.then(response => {
	// check for response errors
	if (response.status !== 200) {
		error("PUT API response failure: " + response.status)
		return;  // api failure
	}
	// valid response will have JSON data
	response.json().then(data => {
		console.log(data);
	})
	})
	// catch fetch errors (ie Nginx ACCESS to server blocked)
	.catch(err => {
	console.log(err + " ");
	});
  }
  function addTableRow(question, unit, tags, email) {
	let tableRow = document.createElement("tr");
	let idCell = document.createElement("td");
	tableRow.appendChild(idCell);
	let questionCell = document.createElement("td");
	questionCell.innerText = question;
	tableRow.appendChild(questionCell);
	let unitCell = document.createElement("td");
	unitCell.innerText = unit;
	tableRow.appendChild(unitCell);
	let tagsCell = document.createElement("td");
	tagsCell.innerText = tags;
	tableRow.appendChild(tagsCell);
	let emailCell = document.createElement("td");
	emailCell.innerText = email;
	tableRow.appendChild(emailCell);

	document.getElementById("discussionTable").appendChild(tableRow);
  }

  function removeTableRows() {
	let numRows = document.getElementById("discussionTable").rows.length;
	for (let i = numRows-1; i > 0; i--) {
		document.getElementById("discussionTable").removeChild(document.getElementById("discussionTable").rows[i]);
	}
  }

</script>